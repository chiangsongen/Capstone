Model Name,Best Params,Best Score,Best Estimator,Train Precision Score,Test Precision Score,Train Recall Score,Test Recall Score,Train f1 Score,Test f1 Score,Train Accuracy Score,Test Accuracy Score,Grid Search Model
XGBoost_gpu,"{'alpha': 0.0, 'gamma': 0.0, 'lambda': 0.0, 'learning_rate': 0.1, 'max_depth': 5, 'n_estimators': 100, 'objective': 'binary:logistic', 'predictor': 'gpu_predictor', 'subsample': 0.5, 'tree_method': 'gpu_hist', 'verbosity': 1}",0.9996802593451978,"XGBClassifier(alpha=0.0, base_score=0.5, booster='gbtree', colsample_bylevel=1,
              colsample_bynode=1, colsample_bytree=1, gamma=0.0, lambda=0.0,
              learning_rate=0.1, max_delta_step=0, max_depth=5,
              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,
              nthread=None, objective='binary:logistic',
              predictor='gpu_predictor', random_state=37, reg_alpha=0,
              reg_lambda=1, scale_pos_weight=1, seed=None, silent=None,
              subsample=0.5, tree_method='gpu_hist', verbosity=1)",0.9995404942239902,0.9686800894854586,0.9998046029331764,0.9863325740318907,0.9996725311345186,0.9774266365688488,0.9996724878709491,0.9993003812921958,"GridSearchCV(cv=5, error_score='raise-deprecating',
             estimator=XGBClassifier(base_score=0.5, booster='gbtree',
                                     colsample_bylevel=1, colsample_bynode=1,
                                     colsample_bytree=1, gamma=0,
                                     learning_rate=0.1, max_delta_step=0,
                                     max_depth=3, min_child_weight=1,
                                     missing=None, n_estimators=100, n_jobs=1,
                                     nthread=None, objective='binary:logistic',
                                     random_state=37, reg_alpha=0, reg_...
                         'predictor': ['gpu_predictor'],
                         'subsample': [0.5, 0.8], 'tree_method': ['gpu_hist'],
                         'verbosity': [1]},
             pre_dispatch='2*n_jobs', refit='recall_score',
             return_train_score=False,
             scoring={'accuracy_score': make_scorer(accuracy_score),
                      'f1_score': make_scorer(f1_score),
                      'precision_score': make_scorer(precision_score),
                      'recall_score': make_scorer(recall_score)},
             verbose=2)"
